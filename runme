#!/bin/sh

SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)

# Los códigos de color se eliminan ya que el uso de "\e" y "-e" en echo no es compatible con POSIX
BLUE=""
GREEN=""
RESET=""
TIMEOUT="25s"

# En POSIX no existen arreglos asociativos, utilizaremos variables individuales
OPTION_FLAGS_docs=false
OPTION_FLAGS_loop=false
OPTION_FLAGS_leak=false
OPTION_FLAGS_coverage=false
OPTION_FLAGS_debug=false
OPTION_FLAGS_clean=true
OPTION_FLAGS_compile_commands=false

# Lista de targets de make
MAKE_TARGETS_docs="doxygen-doc"
MAKE_TARGETS_leak="leak-check"
MAKE_TARGETS_coverage="coverage"
MAKE_TARGETS_debug="valgrind"

# Lista de opciones para iterar
MAKE_TARGETS_list="docs leak coverage debug"

banner() {
  title="$1"
  echo ""
  echo "== $title =="
}

wait_key() {
  if [ "${STOPPABLE:-false}" = true ]; then
    echo "Press Enter to continue"
    read dummy_variable
  fi
}

configure() {
  params="$*"
  banner "Configuring ... [${params}]"

  if [ "${OPTION_FLAGS_clean}" = true ]; then
    rm -rf "${SCRIPT_DIR}/build"
  fi

  autoreconf --install

  mkdir -p "${SCRIPT_DIR}/build"
  cd "${SCRIPT_DIR}/build"
  "${SCRIPT_DIR}/configure" ${params} &&
    wait_key
}

make_exec() {
  params="$*"
  banner "MAKE ${params}"

  make ${params} &&
    wait_key
}

run_make_target() {
  target="$1"
  banner "Running ${target}"

  make "${target}" &&
    wait_key
}

show_help() {
  echo "Usage: $0 [options]"
  echo "Options:"
  echo "  -d, --docs                 Enable document generation"
  echo "  -l, --leak                 Enable memory leak check (mutually exclusive with --coverage and --debug)"
  echo "  -c, --coverage             Enable coverage tests (mutually exclusive with --leak and --debug)"
  echo "  -g, --debug                Enable debug mode and run valgrind (mutually exclusive with --leak and --coverage)"
  echo "  -i, --loop                 Enable loop mode"
  echo "  -n, --noclean              Do not clean build directory before building and do not clean after"
  echo "  -m, --compile-commands     Execute compile_commands target"
  echo "  -h, --help                 Show this help message"
}

loop_execution() {
  if [ "${OPTION_FLAGS_compile_commands}" = true ]; then
    make_exec compile_commands || exit 1
  fi
  executed=0
  while true; do
    if [ "$executed" -eq 1 ]; then
      echo ""
      echo "Execute again [y/n]"
      read REPLAY
      if [ "${REPLAY}" = "n" ]; then
        echo ""
        break
      fi
      # Limpia la pantalla (si el comando clear está disponible)
      if command -v clear >/dev/null 2>&1; then
        clear
      else
        printf "\033c"
      fi
    fi
    executed=1
    make_exec || continue
    make_exec check || {
      echo "Running tests individually..."
      # Ejecutar los tests individualmente si falla make check
      for test_file in "${SCRIPT_DIR}/build/tests/"*_test; do
        if [ -x "$test_file" ]; then
          "$test_file"
        fi
      done
    }

    for option in $MAKE_TARGETS_list; do
      option_flag_var="OPTION_FLAGS_${option}"
      option_flag_value=$(eval echo \$$option_flag_var)
      if [ "${option_flag_value}" = true ]; then
        make_target_var="MAKE_TARGETS_${option}"
        make_target_value=$(eval echo \$$make_target_var)
        run_make_target "${make_target_value}" || exit 1
      fi
    done

  done
}

# Variable para rastrear la opción seleccionada
selected_mode=""

# Procesar las opciones de línea de comandos
while [ $# -gt 0 ]; do
  case "$1" in
  -d | --docs)
    OPTION_FLAGS_docs=true
    shift
    ;;
  -l | --leak)
    if [ -n "$selected_mode" ]; then
      echo "Error: Options --leak, --coverage, and --debug are mutually exclusive."
      exit 1
    fi
    OPTION_FLAGS_leak=true
    selected_mode="leak"
    shift
    ;;
  -c | --coverage)
    if [ -n "$selected_mode" ]; then
      echo "Error: Options --leak, --coverage, and --debug are mutually exclusive."
      exit 1
    fi
    OPTION_FLAGS_coverage=true
    selected_mode="coverage"
    shift
    ;;
  -g | --debug)
    if [ -n "$selected_mode" ]; then
      echo "Error: Options --leak, --coverage, and --debug are mutually exclusive."
      exit 1
    fi
    OPTION_FLAGS_debug=true
    selected_mode="debug"
    shift
    ;;
  -i | --loop)
    OPTION_FLAGS_loop=true
    shift
    ;;
  -n | --clean)
    OPTION_FLAGS_clean=false
    shift
    ;;
  -m | --nocompile-commands)
    OPTION_FLAGS_compile_commands=false
    shift
    ;;
  -h | --help)
    show_help
    exit 0
    ;;
  *)
    echo "Invalid option: $1"
    show_help
    exit 1
    ;;
  esac
done

# Limpiar la pantalla (si el comando clear está disponible)
if command -v clear >/dev/null 2>&1; then
  clear
else
  printf "\033c"
fi

# Construcción de las opciones de configuración
CONFIGURE_OPTIONS=""

BUILD_MODES=""

if [ "${OPTION_FLAGS_leak}" = true ]; then
  BUILD_MODES="${BUILD_MODES} memleak"
fi

if [ "${OPTION_FLAGS_coverage}" = true ]; then
  BUILD_MODES="${BUILD_MODES} coverage"
fi

if [ "${OPTION_FLAGS_debug}" = true ]; then
  BUILD_MODES="${BUILD_MODES} debug"
fi

if [ -n "${BUILD_MODES}" ]; then
  # Eliminar espacios iniciales
  BUILD_MODES="$(echo "${BUILD_MODES}" | sed 's/^ *//')"
  # Reemplazar espacios por comas
  BUILD_MODES_COMMA_SEPARATED=$(echo "${BUILD_MODES}" | tr ' ' ',')
  CONFIGURE_OPTIONS="${CONFIGURE_OPTIONS} --enable-build-mode=${BUILD_MODES_COMMA_SEPARATED}"
fi

if [ "${OPTION_FLAGS_docs}" = true ]; then
  CONFIGURE_OPTIONS="${CONFIGURE_OPTIONS} --enable-doxygen-doc"
fi

# Ejecutar configuración y construcción
configure ${CONFIGURE_OPTIONS}

# Si el modo loop está habilitado, ejecutamos en bucle
if [ "${OPTION_FLAGS_loop}" = true ]; then
  loop_execution
  if [ "${OPTION_FLAGS_clean}" = true ]; then
    make_exec maintainer-clean
  fi
else
  if [ "${OPTION_FLAGS_compile_commands}" = true ]; then
    make_exec compile_commands
  fi
  make_exec
  make_exec check || {
    ./tests/saurion_test
    exit 1
  }
  for option in $MAKE_TARGETS_list; do
    option_flag_var="OPTION_FLAGS_${option}"
    option_flag_value=$(eval echo \$$option_flag_var)
    if [ "${option_flag_value}" = true ]; then
      make_target_var="MAKE_TARGETS_${option}"
      make_target_value=$(eval echo \$$make_target_var)
      run_make_target "${make_target_value}"
    fi
  done
  if [ "${OPTION_FLAGS_clean}" = true ]; then
    make_exec maintainer-clean
  fi
fi
