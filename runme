#!/bin/sh

SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)

# En POSIX no existen arrays asociativos, utilizaremos variables individuales
OPTION_FLAGS_docs=false
OPTION_FLAGS_loop=false
OPTION_FLAGS_leak=false
OPTION_FLAGS_coverage=false
OPTION_FLAGS_debug=false
OPTION_FLAGS_clean=false
OPTION_FLAGS_compile_commands=false
OPTION_FLAGS_iwyu=false
OPTION_FLAGS_thread=false

banner() {
  title="$1"
  echo ""
  echo "== $title =="
}

wait_key() {
  if [ "${STOPPABLE:-false}" = true ]; then
    echo "Press Enter to continue"
    read -r _
  fi
}

configure() {
  params="$*"
  banner "Configuring ... [${params}]"

  if [ "${OPTION_FLAGS_clean}" = true ]; then
    rm -rf "${SCRIPT_DIR}/build"
  fi

  aclocal
  autoreconf --install

  mkdir -p "${SCRIPT_DIR}/build"
  cd "${SCRIPT_DIR}/build" || exit
  "${SCRIPT_DIR}/configure" ${params} &&
    wait_key
}

make_exec() {
  params="$*"
  banner "MAKE ${params}"

  max_attempts=3
  attempt=0

  while [ $attempt -lt $max_attempts ]; do
    attempt=$((attempt + 1))

    # Ejecuta el comando con timeout
    timeout "120s" make "${params}"
    exit_status=$?

    if [ $exit_status -eq 0 ]; then
      break
    fi

    if [ $attempt = $max_attempts ]; then
      break
    fi
  done
  wait_key
}

make_iwyu() {
  banner "MAKE IWYU"

  make clean && make compile_commands &&
    iwyu-tool -p .. | bat &&
    wait_key
}

make_tests() {
  banner "MAKE check"

  max_attempts=3
  attempt=0

  while [ $attempt -lt $max_attempts ]; do
    attempt=$((attempt + 1))

    # Ejecuta el comando con timeout
    timeout "30s" make check
    exit_status=$?

    if [ $exit_status -eq 0 ]; then
      break
    fi

    if [ $attempt = $max_attempts ]; then
      break
    fi
  done
  wait_key
}

run_make_target() {
  target="$1"
  banner "Running ${target}"

  make "${target}" &&
    wait_key
}

show_help() {
  echo "Usage: $0 [options]"
  echo "Options:"
  echo "  -d, --docs                 Enable document generation"
  echo "  -l, --leak                 Enable memory leak check (mutually exclusive with --coverage, --debug, and --thread)"
  echo "  -c, --coverage             Enable coverage tests (mutually exclusive with --leak, --debug, and --thread)"
  echo "  -g, --debug                Enable debug mode and run valgrind (mutually exclusive with --leak, --coverage, and --thread)"
  echo "  -t, --thread               Enable thread-sanitize mode (mutually exclusive with --leak, --coverage, and --debug)"
  echo "  -i, --loop                 Enable loop mode"
  echo "  -n, --clean                Clean build directory before building and do not clean after"
  echo "  -m, --compile-commands     Execute compile_commands target"
  echo "  -w, --iwyu                 Execute iwyu"
  echo "  -h, --help                 Show this help message"
}

loop_execution() {
  if [ "${OPTION_FLAGS_compile_commands}" = true ]; then
    make_exec compile_commands || exit 1
  fi
  executed=0
  while true; do
    if [ "$executed" -eq 1 ]; then
      echo ""
      echo "Execute again [y/n]"
      read -r REPLAY
      if [ "${REPLAY}" = "n" ]; then
        echo ""
        break
      fi
      # Limpia la pantalla (si el comando clear está disponible)
      if command -v clear >/dev/null 2>&1; then
        clear
      else
        printf "\033c"
      fi
    fi
    executed=1
    make_exec || exit 1
    make_tests || {
      echo "Running tests individually..."
      # Ejecutar los tests individualmente si falla make check
      for test_file in "${SCRIPT_DIR}/build/tests/"*_test; do
        if [ -x "$test_file" ]; then
          "$test_file"
        fi
      done
    }
    if [ "${OPTION_FLAGS_docs}" = true ]; then
      make_exec doxygen-doc || continue
    fi
    if [ "${OPTION_FLAGS_coverage}" = true ]; then
      make_exec coverage || continue
    fi
    if [ "${OPTION_FLAGS_iwyu}" = true ]; then
      make_iwyu || continue
    fi
  done
}

# Variable para rastrear la opción seleccionada
selected_mode=""

# Procesar las opciones de línea de comandos
while [ $# -gt 0 ]; do
  case "$1" in
  -d | --docs)
    OPTION_FLAGS_docs=true
    shift
    ;;
  -l | --leak)
    if [ -n "$selected_mode" ]; then
      echo "Error: Options --leak, --coverage, --debug, and --thread are mutually exclusive."
      exit 1
    fi
    OPTION_FLAGS_leak=true
    selected_mode="leak"
    shift
    ;;
  -c | --coverage)
    if [ -n "$selected_mode" ]; then
      echo "Error: Options --leak, --coverage, --debug, and --thread are mutually exclusive."
      exit 1
    fi
    OPTION_FLAGS_coverage=true
    selected_mode="coverage"
    shift
    ;;
  -g | --debug)
    if [ -n "$selected_mode" ]; then
      echo "Error: Options --leak, --coverage, --debug, and --thread are mutually exclusive."
      exit 1
    fi
    OPTION_FLAGS_debug=true
    selected_mode="debug"
    shift
    ;;
  -t | --thread)
    if [ -n "$selected_mode" ]; then
      echo "Error: Options --leak, --coverage, --debug, and --thread are mutually exclusive."
      exit 1
    fi
    OPTION_FLAGS_thread=true
    selected_mode="thread"
    shift
    ;;
  -i | --loop)
    OPTION_FLAGS_loop=true
    shift
    ;;
  -n | --clean)
    OPTION_FLAGS_clean=true
    shift
    ;;
  -m | --compile-commands)
    OPTION_FLAGS_compile_commands=true
    shift
    ;;
  -w | --iwyu)
    OPTION_FLAGS_iwyu=true
    shift
    ;;
  -h | --help)
    show_help
    exit 0
    ;;
  *)
    echo "Invalid option: $1"
    show_help
    exit 1
    ;;
  esac
done

# Limpiar la pantalla (si el comando clear está disponible)
if command -v clear >/dev/null 2>&1; then
  clear
else
  printf "\033c"
fi

# Construcción de las opciones de configuración
CONFIGURE_OPTIONS=""

BUILD_MODES=""

if [ "${OPTION_FLAGS_leak}" = true ]; then
  BUILD_MODES="${BUILD_MODES} memleak"
fi

if [ "${OPTION_FLAGS_coverage}" = true ]; then
  BUILD_MODES="${BUILD_MODES} coverage"
fi

if [ "${OPTION_FLAGS_debug}" = true ]; then
  BUILD_MODES="${BUILD_MODES} debug"
fi

if [ "${OPTION_FLAGS_thread}" = true ]; then
  BUILD_MODES="${BUILD_MODES} thread-sanitize"
fi

if [ -n "${BUILD_MODES}" ]; then
  # Eliminar espacios iniciales
  BUILD_MODES="$(echo "${BUILD_MODES}" | sed 's/^ *//')"
  # Reemplazar espacios por comas
  BUILD_MODES_COMMA_SEPARATED=$(echo "${BUILD_MODES}" | tr ' ' ',')
  CONFIGURE_OPTIONS="${CONFIGURE_OPTIONS} --enable-build-mode=${BUILD_MODES_COMMA_SEPARATED}"
fi

if [ "${OPTION_FLAGS_docs}" = true ]; then
  CONFIGURE_OPTIONS="${CONFIGURE_OPTIONS} --enable-doxygen-doc"
fi

# Ejecutar configuración y construcción
configure "${CONFIGURE_OPTIONS}"

# Si el modo loop está habilitado, ejecutamos en bucle
if [ "${OPTION_FLAGS_loop}" = true ]; then
  loop_execution
  if [ "${OPTION_FLAGS_clean}" = true ]; then
    make_exec maintainer-clean
  fi
else
  if [ "${OPTION_FLAGS_compile_commands}" = true ]; then
    make_exec compile_commands
  fi
  make_exec all
  make_tests || ./tests/saurion_test || exit 1
  if [ "${OPTION_FLAGS_docs}" = true ]; then
    make_exec doxygen-doc
  fi
  if [ "${OPTION_FLAGS_coverage}" = true ]; then
    make_exec coverage || exit 1
  fi
  if [ "${OPTION_FLAGS_iwyu}" = true ]; then
    make_iwyu || exit 1
  fi
  if [ "${OPTION_FLAGS_clean}" = true ]; then
    make_exec maintainer-clean
  fi
fi
